{"ast":null,"code":"import Mock from \"mockjs\";\nexport default {\n  getMenu: config => {\n    return new Promise((resolve, reject) => {\n      const {\n        username,\n        password\n      } = JSON.parse(config.body);\n      // 先判斷用戶是否存在\n      // 判斷帳號和密碼是否對應\n      if (username === 'admin' && password === 'admin') {\n        resolve({\n          data: {\n            menu: [\n              // 你的菜單數據\n            ],\n            token: Mock.Random.guid(),\n            message: '獲取成功'\n          }\n        });\n      } else if (username === 'test' && password === \"Test123\") {\n        resolve({\n          data: {\n            menu: [\n              // 你的菜單數據\n            ],\n            token: Mock.Random.guid(),\n            message: '獲取成功'\n          }\n        });\n      } else {\n        reject({\n          data: {\n            message: '密碼錯誤'\n          }\n        });\n      }\n    });\n  }\n};","map":{"version":3,"names":["Mock","getMenu","config","Promise","resolve","reject","username","password","JSON","parse","body","data","menu","token","Random","guid","message"],"sources":["/Users/serina/Desktop/vue-backstage/src/api/mockServeData/permission.js"],"sourcesContent":["import Mock from \"mockjs\";\nexport default {\n    getMenu: config => {\n        return new Promise((resolve, reject) => {\n            const { username, password } = JSON.parse(config.body);\n            // 先判斷用戶是否存在\n            // 判斷帳號和密碼是否對應\n            if (username === 'admin' && password === 'admin'){\n                resolve ({\n                    data: {\n                        menu: [\n                            // 你的菜單數據\n                        ],\n                        token: Mock.Random.guid(),\n                        message: '獲取成功'\n                    }\n                });\n            } else if (username === 'test' && password === \"Test123\") {\n                resolve ({\n                    data: {\n                        menu: [\n                            // 你的菜單數據\n                        ],\n                        token: Mock.Random.guid(),\n                        message: '獲取成功'\n                    }\n                });\n            } else {\n                reject ({\n                    data: {\n                        message: '密碼錯誤'\n                    }\n                });\n            }\n        });\n    }\n}"],"mappings":"AAAA,OAAOA,IAAI,MAAM,QAAQ;AACzB,eAAe;EACXC,OAAO,EAAEC,MAAM,IAAI;IACf,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACpC,MAAM;QAAEC,QAAQ;QAAEC;MAAS,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACP,MAAM,CAACQ,IAAI,CAAC;MACtD;MACA;MACA,IAAIJ,QAAQ,KAAK,OAAO,IAAIC,QAAQ,KAAK,OAAO,EAAC;QAC7CH,OAAO,CAAE;UACLO,IAAI,EAAE;YACFC,IAAI,EAAE;cACF;YAAA,CACH;YACDC,KAAK,EAAEb,IAAI,CAACc,MAAM,CAACC,IAAI,CAAC,CAAC;YACzBC,OAAO,EAAE;UACb;QACJ,CAAC,CAAC;MACN,CAAC,MAAM,IAAIV,QAAQ,KAAK,MAAM,IAAIC,QAAQ,KAAK,SAAS,EAAE;QACtDH,OAAO,CAAE;UACLO,IAAI,EAAE;YACFC,IAAI,EAAE;cACF;YAAA,CACH;YACDC,KAAK,EAAEb,IAAI,CAACc,MAAM,CAACC,IAAI,CAAC,CAAC;YACzBC,OAAO,EAAE;UACb;QACJ,CAAC,CAAC;MACN,CAAC,MAAM;QACHX,MAAM,CAAE;UACJM,IAAI,EAAE;YACFK,OAAO,EAAE;UACb;QACJ,CAAC,CAAC;MACN;IACJ,CAAC,CAAC;EACN;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}