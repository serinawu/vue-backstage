{"ast":null,"code":"/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\n\n/**\r\n * AUTO-GENERATED FILE. DO NOT MODIFY.\r\n */\n\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\nimport { __extends } from \"tslib\";\nimport SeriesModel from '../../model/Series.js';\nimport createSeriesData from '../helper/createSeriesData.js';\nimport { each } from 'zrender/lib/core/util.js';\nvar BaseBarSeriesModel = /** @class */\nfunction (_super) {\n  __extends(BaseBarSeriesModel, _super);\n  function BaseBarSeriesModel() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.type = BaseBarSeriesModel.type;\n    return _this;\n  }\n  BaseBarSeriesModel.prototype.getInitialData = function (option, ecModel) {\n    return createSeriesData(null, this, {\n      useEncodeDefaulter: true\n    });\n  };\n  BaseBarSeriesModel.prototype.getMarkerPosition = function (value, dims, startingAtTick) {\n    var coordSys = this.coordinateSystem;\n    if (coordSys && coordSys.clampData) {\n      // PENDING if clamp ?\n      var pt_1 = coordSys.dataToPoint(coordSys.clampData(value));\n      if (startingAtTick) {\n        each(coordSys.getAxes(), function (axis, idx) {\n          // If axis type is category, use tick coords instead\n          if (axis.type === 'category') {\n            var tickCoords = axis.getTicksCoords();\n            var tickIdx = coordSys.clampData(value)[idx]; // The index of rightmost tick of markArea is 1 larger than x1/y1 index\n\n            if (dims && (dims[idx] === 'x1' || dims[idx] === 'y1')) {\n              tickIdx += 1;\n            }\n            tickIdx > tickCoords.length - 1 && (tickIdx = tickCoords.length - 1);\n            tickIdx < 0 && (tickIdx = 0);\n            tickCoords[tickIdx] && (pt_1[idx] = axis.toGlobalCoord(tickCoords[tickIdx].coord));\n          }\n        });\n      } else {\n        var data = this.getData();\n        var offset = data.getLayout('offset');\n        var size = data.getLayout('size');\n        var offsetIndex = coordSys.getBaseAxis().isHorizontal() ? 0 : 1;\n        pt_1[offsetIndex] += offset + size / 2;\n      }\n      return pt_1;\n    }\n    return [NaN, NaN];\n  };\n  BaseBarSeriesModel.type = 'series.__base_bar__';\n  BaseBarSeriesModel.defaultOption = {\n    // zlevel: 0,\n    z: 2,\n    coordinateSystem: 'cartesian2d',\n    legendHoverLink: true,\n    // stack: null\n    // Cartesian coordinate system\n    // xAxisIndex: 0,\n    // yAxisIndex: 0,\n    barMinHeight: 0,\n    barMinAngle: 0,\n    // cursor: null,\n    large: false,\n    largeThreshold: 400,\n    progressive: 3e3,\n    progressiveChunkMode: 'mod'\n  };\n  return BaseBarSeriesModel;\n}(SeriesModel);\nSeriesModel.registerClass(BaseBarSeriesModel);\nexport default BaseBarSeriesModel;","map":{"version":3,"names":["__extends","SeriesModel","createSeriesData","each","BaseBarSeriesModel","_super","_this","apply","arguments","type","prototype","getInitialData","option","ecModel","useEncodeDefaulter","getMarkerPosition","value","dims","startingAtTick","coordSys","coordinateSystem","clampData","pt_1","dataToPoint","getAxes","axis","idx","tickCoords","getTicksCoords","tickIdx","length","toGlobalCoord","coord","data","getData","offset","getLayout","size","offsetIndex","getBaseAxis","isHorizontal","NaN","defaultOption","z","legendHoverLink","barMinHeight","barMinAngle","large","largeThreshold","progressive","progressiveChunkMode","registerClass"],"sources":["C:/Users/user/Documents/vue-backstage/node_modules/echarts/lib/chart/bar/BaseBarSeries.js"],"sourcesContent":["\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\n\r\n\r\n/**\r\n * AUTO-GENERATED FILE. DO NOT MODIFY.\r\n */\r\n\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\nimport { __extends } from \"tslib\";\r\nimport SeriesModel from '../../model/Series.js';\r\nimport createSeriesData from '../helper/createSeriesData.js';\r\nimport { each } from 'zrender/lib/core/util.js';\r\n\r\nvar BaseBarSeriesModel =\r\n/** @class */\r\nfunction (_super) {\r\n  __extends(BaseBarSeriesModel, _super);\r\n\r\n  function BaseBarSeriesModel() {\r\n    var _this = _super !== null && _super.apply(this, arguments) || this;\r\n\r\n    _this.type = BaseBarSeriesModel.type;\r\n    return _this;\r\n  }\r\n\r\n  BaseBarSeriesModel.prototype.getInitialData = function (option, ecModel) {\r\n    return createSeriesData(null, this, {\r\n      useEncodeDefaulter: true\r\n    });\r\n  };\r\n\r\n  BaseBarSeriesModel.prototype.getMarkerPosition = function (value, dims, startingAtTick) {\r\n    var coordSys = this.coordinateSystem;\r\n\r\n    if (coordSys && coordSys.clampData) {\r\n      // PENDING if clamp ?\r\n      var pt_1 = coordSys.dataToPoint(coordSys.clampData(value));\r\n\r\n      if (startingAtTick) {\r\n        each(coordSys.getAxes(), function (axis, idx) {\r\n          // If axis type is category, use tick coords instead\r\n          if (axis.type === 'category') {\r\n            var tickCoords = axis.getTicksCoords();\r\n            var tickIdx = coordSys.clampData(value)[idx]; // The index of rightmost tick of markArea is 1 larger than x1/y1 index\r\n\r\n            if (dims && (dims[idx] === 'x1' || dims[idx] === 'y1')) {\r\n              tickIdx += 1;\r\n            }\r\n\r\n            tickIdx > tickCoords.length - 1 && (tickIdx = tickCoords.length - 1);\r\n            tickIdx < 0 && (tickIdx = 0);\r\n            tickCoords[tickIdx] && (pt_1[idx] = axis.toGlobalCoord(tickCoords[tickIdx].coord));\r\n          }\r\n        });\r\n      } else {\r\n        var data = this.getData();\r\n        var offset = data.getLayout('offset');\r\n        var size = data.getLayout('size');\r\n        var offsetIndex = coordSys.getBaseAxis().isHorizontal() ? 0 : 1;\r\n        pt_1[offsetIndex] += offset + size / 2;\r\n      }\r\n\r\n      return pt_1;\r\n    }\r\n\r\n    return [NaN, NaN];\r\n  };\r\n\r\n  BaseBarSeriesModel.type = 'series.__base_bar__';\r\n  BaseBarSeriesModel.defaultOption = {\r\n    // zlevel: 0,\r\n    z: 2,\r\n    coordinateSystem: 'cartesian2d',\r\n    legendHoverLink: true,\r\n    // stack: null\r\n    // Cartesian coordinate system\r\n    // xAxisIndex: 0,\r\n    // yAxisIndex: 0,\r\n    barMinHeight: 0,\r\n    barMinAngle: 0,\r\n    // cursor: null,\r\n    large: false,\r\n    largeThreshold: 400,\r\n    progressive: 3e3,\r\n    progressiveChunkMode: 'mod'\r\n  };\r\n  return BaseBarSeriesModel;\r\n}(SeriesModel);\r\n\r\nSeriesModel.registerClass(BaseBarSeriesModel);\r\nexport default BaseBarSeriesModel;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}